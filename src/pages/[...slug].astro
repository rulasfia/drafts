---
import markdownit from "markdown-it";
import { drizzle } from "drizzle-orm/d1";
import { eq } from "drizzle-orm";
import { contents } from "../schema";
import { getContent } from "../utils/query";
import { parseImages } from "../utils/formatString";
import MainLayout from "../layouts/main-layout.astro";

const { env } = Astro.locals.runtime;

const { slug } = Astro.params;

const path = await drizzle(env.DB)
	.select()
	.from(contents)
	.where(eq(contents.slug, slug ?? ""))
	.limit(1);

if (path.length !== 1) return new Response(null, { status: 404 });

// const startChar = "!\\[\\["; // Escape the ![[ characters
// const endChar = "\\]\\]"; // Escape the ]] characters

// const regex = new RegExp(`${startChar}(.*?)${endChar}`, "g");
// const matches = path[0].body.match(regex)?.map((m) => m.slice(3, -2)) ?? [];

const parsed = parseImages(path[0].body);

const assets = await Promise.all(
	parsed.matches.map(async (match) => {
		const res = await getContent(env.GITHUB_PAT, `Works/assets/${match}`);
		return res.download_url;
	})
);

// const content = await marked.parse(path[0].body);
const md = markdownit();
// md.use(fromHighlighter(highlighter, { theme: "rose-pine" }));

const content = md.render(path[0].body);

// replace matches (including start & end characters) with the actual asset URL
const contentAfter = content.replace(parsed.regex, () => {
	const asset = assets.shift();
	return `<img src="${asset}" />`;
});
---

<MainLayout>
	<div class="container mx-auto px-4 md:px-0 py-12">
		<h1
			class="text-4xl lg:text-5xl text-center font-heading font-bold text-balance"
		>
			{path[0].title.replace(".md", "")}
		</h1>
		<p class="text-center dark:text-neutral-300 text-neutral-600 mb-16 mt-4">
			{
				new Date(path[0].created).toLocaleDateString("en-GB", {
					month: "long",
					day: "2-digit",
					year: "numeric",
				})
			}
		</p>
		<article
			class="prose mx-auto prose-neutral dark:prose-invert lg:prose-lg prose-img:mb-2 prose-img:mt-4 prose-img:rounded-lg prose-h1:text-3xl prose-h2:text-2xl prose-h3:text-xl hover:prose-a:decoration-orange-400"
			set:html={contentAfter}
		/>
	</div>

	<script type="module">
		import { codeToHtml } from "https://esm.sh/shiki@1.14.1";

		const contentRef = document.querySelectorAll('code[class*="language-"]');
		const targetRef = document.querySelectorAll("pre");

		contentRef.forEach(async (code, idx) => {
			const newElement = document.createElement("div");

			newElement.innerHTML = await codeToHtml(code.innerText, {
				lang: code.className.replace("language-", ""),
				theme: "rose-pine",
			});

			newElement.classList.add(code.className);
			targetRef[idx].replaceWith(newElement);
		});
	</script>
</MainLayout>
